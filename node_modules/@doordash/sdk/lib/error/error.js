"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoordashServiceFaultError = exports.DoorDashThrottledError = exports.DoorDashAuthorizationError = exports.DoorDashAuthenticationError = exports.DoorDashOtherError = exports.DoorDashValidationFieldError = exports.DoorDashUpdatedNotAllowedError = exports.DoorDashUnknownDeliveryError = exports.DoorDashInvalidDeliveryError = exports.DoorDashDuplicatedDeliveryIdError = exports.DoorDashCancelNotAllowedError = exports.DoorDashError = void 0;
class DoorDashError extends Error {
    constructor(errorCode, message, fieldErrors) {
        super();
        this.errorCode = errorCode;
        this.message = message;
        this.fieldErrors = fieldErrors;
    }
    static mapCodeToError(errorCode, message, fieldErrors) {
        switch (errorCode) {
            case 'authorization_error':
                return new DoorDashAuthorizationError(errorCode, message);
            case 'delivery_abandoned':
                return new DoorDashCancelNotAllowedError(errorCode, message);
            case 'delivery_completed':
                return new DoorDashCancelNotAllowedError(errorCode, message);
            case 'delivery_picked_up':
                return new DoorDashCancelNotAllowedError(errorCode, message);
            case 'cancellation_window_closed':
                return new DoorDashCancelNotAllowedError(errorCode, message);
            case 'duplicate_delivery_id':
                return new DoorDashDuplicatedDeliveryIdError(errorCode, message);
            case 'distance_too_long':
                return new DoorDashInvalidDeliveryError(errorCode, message);
            case 'pickup_address_not_in_coverage':
                return new DoorDashInvalidDeliveryError(errorCode, message);
            case 'delivery_address_not_in_coverage':
                return new DoorDashInvalidDeliveryError(errorCode, message);
            case 'outside_of_delivery_time':
                return new DoorDashInvalidDeliveryError(errorCode, message);
            case 'unknown_delivery_id':
                return new DoorDashUnknownDeliveryError(errorCode, message);
            case 'Pickup in Progress':
                return new DoorDashUpdatedNotAllowedError(errorCode, message);
            case 'Delivery in Progress':
                return new DoorDashUpdatedNotAllowedError(errorCode, message);
            case 'Delivery Complete':
                return new DoorDashUpdatedNotAllowedError(errorCode, message);
            case 'validation_error':
                return new DoorDashValidationFieldError(errorCode, message, fieldErrors);
            case 'service_fault':
                return new DoordashServiceFaultError(errorCode, message);
            default:
                return new DoorDashOtherError(errorCode, message, fieldErrors);
        }
    }
}
exports.DoorDashError = DoorDashError;
class DoorDashCancelNotAllowedError extends DoorDashError {
}
exports.DoorDashCancelNotAllowedError = DoorDashCancelNotAllowedError;
class DoorDashDuplicatedDeliveryIdError extends DoorDashError {
}
exports.DoorDashDuplicatedDeliveryIdError = DoorDashDuplicatedDeliveryIdError;
class DoorDashInvalidDeliveryError extends DoorDashError {
}
exports.DoorDashInvalidDeliveryError = DoorDashInvalidDeliveryError;
class DoorDashUnknownDeliveryError extends DoorDashError {
}
exports.DoorDashUnknownDeliveryError = DoorDashUnknownDeliveryError;
class DoorDashUpdatedNotAllowedError extends DoorDashError {
}
exports.DoorDashUpdatedNotAllowedError = DoorDashUpdatedNotAllowedError;
class DoorDashValidationFieldError extends DoorDashError {
}
exports.DoorDashValidationFieldError = DoorDashValidationFieldError;
class DoorDashOtherError extends DoorDashError {
}
exports.DoorDashOtherError = DoorDashOtherError;
class DoorDashAuthenticationError extends DoorDashError {
}
exports.DoorDashAuthenticationError = DoorDashAuthenticationError;
class DoorDashAuthorizationError extends DoorDashError {
}
exports.DoorDashAuthorizationError = DoorDashAuthorizationError;
class DoorDashThrottledError extends DoorDashError {
}
exports.DoorDashThrottledError = DoorDashThrottledError;
class DoordashServiceFaultError extends DoorDashError {
}
exports.DoordashServiceFaultError = DoordashServiceFaultError;
//# sourceMappingURL=error.js.map