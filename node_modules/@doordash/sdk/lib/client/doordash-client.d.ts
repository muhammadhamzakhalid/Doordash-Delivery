import { TokenContext } from "../model/token-context";
import { DoorDashResponse } from "../net/doordash-response";
import { CreateDeliveryInput, DeliveryQuoteInput, DeliveryResponse, UpdateDeliveryInput } from "../generated-client/api";
export declare class DoorDashClient {
    private _apiClient;
    private _tokenContext;
    constructor(tokenContext: TokenContext);
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    cancelDelivery(externalDeliveryId: string, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    getDelivery(externalDeliveryId: string, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {DoorDashError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): Promise<DoorDashResponse<DeliveryResponse>>;
    private _wrap;
    private _generateOptions;
}
