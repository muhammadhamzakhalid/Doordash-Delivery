/**
 * Drive Go API Specification
 * Last updated: Apr 11, 2022  ### Release Notes  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Enum to specify what should the dasher do if the delivery is undeliverable. The default is \"dispose\".
 * @export
 * @enum {string}
 */
export declare enum ActionIfUndeliverable {
    ReturnToPickup = "return_to_pickup",
    Dispose = "dispose"
}
/**
 * Authorization error, available credentials don\'t match requested operation
 * @export
 * @interface AuthorizationError
 */
export interface AuthorizationError {
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    code: AuthorizationErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    message: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum AuthorizationErrorCodeEnum {
    AuthorizationError = "authorization_error"
}
/**
 *
 * @export
 * @interface CancelNotAllowedError
 */
export interface CancelNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    code: CancelNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    reason: CancelNotAllowedErrorReasonEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum CancelNotAllowedErrorCodeEnum {
    CancelNotAllowed = "cancel_not_allowed"
}
/**
    * @export
    * @enum {string}
    */
export declare enum CancelNotAllowedErrorReasonEnum {
    DeliveryAbandoned = "delivery_abandoned",
    DeliveryCancelled = "delivery_cancelled",
    DeliveryCompleted = "delivery_completed",
    DeliveryCreationInProgress = "delivery_creation_in_progress",
    DeliveryPickedUp = "delivery_picked_up",
    CancellationWindowClosed = "cancellation_window_closed"
}
/**
 *
 * @export
 * @interface CreateDeliveryInput
 */
export interface CreateDeliveryInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    external_delivery_id: string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    locale?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_address: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_phone_number: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_instructions?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_reference_tag?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_address: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_phone_number: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_instructions?: string;
    /**
     * Given name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_contact_given_name?: string;
    /**
     * Family name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_contact_family_name?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    dropoff_contact_send_notifications?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in cents. i.e. $19.99 = 1999
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    order_value?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    currency?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    pickup_time?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    dropoff_time?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    pickup_window?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    dropoff_window?: TimeWindow;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    contactless_dropoff?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof CreateDeliveryInput
     */
    action_if_undeliverable?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    tip?: number;
}
/**
 * Delivery base ID.
 * @export
 * @interface DeliveryBase
 */
export interface DeliveryBase {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryBase
     */
    external_delivery_id: string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication.
     * @type {string}
     * @memberof DeliveryBase
     */
    locale?: string;
}
/**
 * Delivery drop off details.
 * @export
 * @interface DeliveryDropoffDetails
 */
export interface DeliveryDropoffDetails {
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_instructions?: string;
    /**
     * Given name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_contact_given_name?: string;
    /**
     * Family name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_contact_family_name?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryDropoffDetails
     */
    dropoff_contact_send_notifications?: boolean;
}
/**
 * Delivery input only options ID.
 * @export
 * @interface DeliveryInputOnlyOptions
 */
export interface DeliveryInputOnlyOptions {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    pickup_time?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    dropoff_time?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    pickup_window?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    dropoff_window?: TimeWindow;
}
/**
 * Delivery options ID.
 * @export
 * @interface DeliveryOptions
 */
export interface DeliveryOptions {
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    contactless_dropoff?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryOptions
     */
    action_if_undeliverable?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryOptions
     */
    tip?: number;
}
/**
 * Delivery status and details provided by Doordash.
 * @export
 * @interface DeliveryOutput
 */
export interface DeliveryOutput {
    /**
     * Delivery status
     * @type {string}
     * @memberof DeliveryOutput
     */
    delivery_status?: DeliveryOutputDeliveryStatusEnum;
    /**
     * If delivery was cancelled, reason for why
     * @type {string}
     * @memberof DeliveryOutput
     */
    cancellation_reason?: DeliveryOutputCancellationReasonEnum;
    /**
     * Estimated time of pickup in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    pickup_time_estimated?: string;
    /**
     * Actual time of pickup in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    pickup_time_actual?: string;
    /**
     * Estimated time of drop off in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    dropoff_time_estimated?: string;
    /**
     * Actual time of drop off in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    dropoff_time_actual?: string;
    /**
     * Estimated time of return in ISO-8601 format, or null if delivery is not returnable or already returned
     * @type {string}
     * @memberof DeliveryOutput
     */
    return_time_estimated?: string;
    /**
     * Actual time of return in ISO-8601 format, or null if return is not returnable or the return is not yet completed
     * @type {string}
     * @memberof DeliveryOutput
     */
    return_time_actual?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryOutput
     */
    return_address?: string;
    /**
     * Delivery Fee in smallest unit. i.e. For USD, 1940 equals $19.40 or null if not available
     * @type {number}
     * @memberof DeliveryOutput
     */
    fee?: number;
    /**
     * Unique reference value for requesting manual support, generated by Doordash.
     * @type {string}
     * @memberof DeliveryOutput
     */
    support_reference?: string;
    /**
     * Tracking URL for tracking the order visually
     * @type {string}
     * @memberof DeliveryOutput
     */
    tracking_url?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryOutput
     */
    dropoff_verification_image_url?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryOutput
     */
    pickup_verification_image_url?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DeliveryOutputDeliveryStatusEnum {
    Quote = "quote",
    Created = "created",
    Confirmed = "confirmed",
    EnrouteToPickup = "enroute_to_pickup",
    ArrivedAtPickup = "arrived_at_pickup",
    PickedUp = "picked_up",
    EnrouteToDropoff = "enroute_to_dropoff",
    ArrivedAtDropoff = "arrived_at_dropoff",
    Delivered = "delivered",
    EnrouteToReturn = "enroute_to_return",
    ArrivedAtReturn = "arrived_at_return",
    Returned = "returned",
    Cancelled = "cancelled"
}
/**
    * @export
    * @enum {string}
    */
export declare enum DeliveryOutputCancellationReasonEnum {
    CancelledByCreator = "cancelled_by_creator",
    FailedToProcessPayment = "failed_to_process_payment",
    FailedToAssignAndRefunded = "failed_to_assign_and_refunded",
    FailedToPickup = "failed_to_pickup",
    FailedToDeliver = "failed_to_deliver",
    FailedToReturn = "failed_to_return"
}
/**
 * Delivery pickup details.
 * @export
 * @interface DeliveryPickupDetails
 */
export interface DeliveryPickupDetails {
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    pickup_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    pickup_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    pickup_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    pickup_instructions?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    pickup_reference_tag?: string;
}
/**
 * Request body for quote endpoint
 * @export
 * @interface DeliveryQuoteInput
 */
export interface DeliveryQuoteInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    external_delivery_id: string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    locale?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_address: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_phone_number: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_instructions?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_reference_tag?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_address: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_phone_number: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_instructions?: string;
    /**
     * Given name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_contact_given_name?: string;
    /**
     * Family name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_contact_family_name?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    dropoff_contact_send_notifications?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in cents. i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    order_value?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    currency?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    pickup_time?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    dropoff_time?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    pickup_window?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    dropoff_window?: TimeWindow;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    contactless_dropoff?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryQuoteInput
     */
    action_if_undeliverable?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    tip?: number;
}
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryResponse
 */
export interface DeliveryResponse {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryResponse
     */
    external_delivery_id: string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication.
     * @type {string}
     * @memberof DeliveryResponse
     */
    locale?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_instructions?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_reference_tag?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_instructions?: string;
    /**
     * Given name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_contact_given_name?: string;
    /**
     * Family name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_contact_family_name?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    dropoff_contact_send_notifications?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in cents. i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryResponse
     */
    order_value?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryResponse
     */
    currency: string;
    /**
     * Delivery status
     * @type {string}
     * @memberof DeliveryResponse
     */
    delivery_status: DeliveryResponseDeliveryStatusEnum;
    /**
     * If delivery was cancelled, reason for why
     * @type {string}
     * @memberof DeliveryResponse
     */
    cancellation_reason?: DeliveryResponseCancellationReasonEnum;
    /**
     * Estimated time of pickup in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_time_estimated?: string;
    /**
     * Actual time of pickup in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_time_actual?: string;
    /**
     * Estimated time of drop off in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_time_estimated?: string;
    /**
     * Actual time of drop off in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_time_actual?: string;
    /**
     * Estimated time of return in ISO-8601 format, or null if delivery is not returnable or already returned
     * @type {string}
     * @memberof DeliveryResponse
     */
    return_time_estimated?: string;
    /**
     * Actual time of return in ISO-8601 format, or null if return is not returnable or the return is not yet completed
     * @type {string}
     * @memberof DeliveryResponse
     */
    return_time_actual?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof DeliveryResponse
     */
    return_address?: string;
    /**
     * Delivery Fee in smallest unit. i.e. For USD, 1940 equals $19.40 or null if not available
     * @type {number}
     * @memberof DeliveryResponse
     */
    fee: number;
    /**
     * Unique reference value for requesting manual support, generated by Doordash.
     * @type {string}
     * @memberof DeliveryResponse
     */
    support_reference?: string;
    /**
     * Tracking URL for tracking the order visually
     * @type {string}
     * @memberof DeliveryResponse
     */
    tracking_url?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryResponse
     */
    dropoff_verification_image_url?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryResponse
     */
    pickup_verification_image_url?: string;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    contactless_dropoff?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryResponse
     */
    action_if_undeliverable?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryResponse
     */
    tip?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DeliveryResponseDeliveryStatusEnum {
    Quote = "quote",
    Created = "created",
    Confirmed = "confirmed",
    EnrouteToPickup = "enroute_to_pickup",
    ArrivedAtPickup = "arrived_at_pickup",
    PickedUp = "picked_up",
    EnrouteToDropoff = "enroute_to_dropoff",
    ArrivedAtDropoff = "arrived_at_dropoff",
    Delivered = "delivered",
    EnrouteToReturn = "enroute_to_return",
    ArrivedAtReturn = "arrived_at_return",
    Returned = "returned",
    Cancelled = "cancelled"
}
/**
    * @export
    * @enum {string}
    */
export declare enum DeliveryResponseCancellationReasonEnum {
    CancelledByCreator = "cancelled_by_creator",
    FailedToProcessPayment = "failed_to_process_payment",
    FailedToAssignAndRefunded = "failed_to_assign_and_refunded",
    FailedToPickup = "failed_to_pickup",
    FailedToDeliver = "failed_to_deliver",
    FailedToReturn = "failed_to_return"
}
/**
 * Delivery value details.
 * @export
 * @interface DeliveryValueDetails
 */
export interface DeliveryValueDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in cents. i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryValueDetails
     */
    order_value?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryValueDetails
     */
    currency?: string;
}
/**
 * Error returned when delivery creation request is duplicate and has a delivery already created for it.
 * @export
 * @interface DuplicateDeliveryIdError
 */
export interface DuplicateDeliveryIdError {
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    code: DuplicateDeliveryIdErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    message: string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    external_delivery_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DuplicateDeliveryIdErrorCodeEnum {
    DuplicateDeliveryId = "duplicate_delivery_id"
}
/**
 * Field Errors that occur during the api call.
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * Name of the field where the error has occurred
     * @type {string}
     * @memberof FieldError
     */
    field: string;
    /**
     * Error objects that were generated during the validation call
     * @type {string}
     * @memberof FieldError
     */
    error: string;
}
/**
 *
 * @export
 * @interface InvalidDeliveryError
 */
export interface InvalidDeliveryError {
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    code: InvalidDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    reason: InvalidDeliveryErrorReasonEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InvalidDeliveryErrorCodeEnum {
    InvalidDeliveryParameters = "invalid_delivery_parameters"
}
/**
    * @export
    * @enum {string}
    */
export declare enum InvalidDeliveryErrorReasonEnum {
    DistanceTooLong = "distance_too_long",
    PickupAddressNotInCoverage = "pickup_address_not_in_coverage",
    DeliveryAddressNotInCoverage = "delivery_address_not_in_coverage",
    OutsideOfDeliveryTime = "outside_of_delivery_time"
}
/**
 * Geolocation value in latitute and longitude
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Latitude of the location
     * @type {number}
     * @memberof Location
     */
    lat: number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof Location
     */
    lng: number;
}
/**
 * Internal service failure, please try again later.
 * @export
 * @interface ServerFault
 */
export interface ServerFault {
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    code: ServerFaultCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    message: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ServerFaultCodeEnum {
    ServiceFault = "service_fault"
}
/**
 * The UTC date-time (in ISO-8601 format) overrides dropoff_time and pickup_time when all four parameters of the time window (i.e. pickup_window_start_time , pickup_window_end_time , dropoff_window_start_time , dropoff_window_end_time ) are provided.
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    start_time?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    end_time?: string;
}
/**
 * External delivery ID was not found.
 * @export
 * @interface UnknownDeliveryError
 */
export interface UnknownDeliveryError {
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    code: UnknownDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    message: string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    external_delivery_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UnknownDeliveryErrorCodeEnum {
    UnknownDeliveryId = "unknown_delivery_id"
}
/**
 *
 * @export
 * @interface UpdateDeliveryInput
 */
export interface UpdateDeliveryInput {
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_instructions?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_reference_tag?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_address?: string;
    /**
     * Optional name of the place, to help dashers find the location
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_business_name?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_phone_number?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_instructions?: string;
    /**
     * Given name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_contact_given_name?: string;
    /**
     * Family name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_contact_family_name?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    dropoff_contact_send_notifications?: boolean;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    contactless_dropoff?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof UpdateDeliveryInput
     */
    action_if_undeliverable?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    tip?: number;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in cents. i.e. $19.99 = 1999
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    order_value?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    currency?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    pickup_time?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    dropoff_time?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    pickup_window?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    dropoff_window?: TimeWindow;
}
/**
 *
 * @export
 * @interface UpdateNotAllowedError
 */
export interface UpdateNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    code: UpdateNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    reason: UpdateNotAllowedErrorReasonEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UpdateNotAllowedErrorCodeEnum {
    UpdateNotAllowed = "update_not_allowed"
}
/**
    * @export
    * @enum {string}
    */
export declare enum UpdateNotAllowedErrorReasonEnum {
    DeliveryCancelled = "delivery_cancelled",
    DeliveryCompleted = "delivery_completed",
    DeliveryCreationInProgress = "delivery_creation_in_progress",
    DeliveryPickedUp = "delivery_picked_up",
    DeliveryAbandoned = "delivery_abandoned",
    UpdateWindowClosed = "update_window_closed"
}
/**
 * The response returned when validation for field errors are encountered.
 * @export
 * @interface ValidationFieldError
 */
export interface ValidationFieldError {
    /**
     *
     * @type {string}
     * @memberof ValidationFieldError
     */
    code: ValidationFieldErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ValidationFieldError
     */
    message: string;
    /**
     * Error objects that were generated during the validation call
     * @type {Array<FieldError>}
     * @memberof ValidationFieldError
     */
    field_errors: Array<FieldError>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ValidationFieldErrorCodeEnum {
    ValidationError = "validation_error"
}
/**
 * RequestDasherApi - axios parameter creator
 * @export
 */
export declare const RequestDasherApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery: (externalDeliveryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery: (createDeliveryInput: CreateDeliveryInput, options?: any) => Promise<RequestArgs>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote: (deliveryQuoteInput: DeliveryQuoteInput, options?: any) => Promise<RequestArgs>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept: (externalDeliveryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery: (externalDeliveryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery: (externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any) => Promise<RequestArgs>;
};
/**
 * RequestDasherApi - functional programming interface
 * @export
 */
export declare const RequestDasherApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
};
/**
 * RequestDasherApi - factory interface
 * @export
 */
export declare const RequestDasherApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
};
/**
 * RequestDasherApi - object-oriented interface
 * @export
 * @class RequestDasherApi
 * @extends {BaseAPI}
 */
export declare class RequestDasherApi extends BaseAPI {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    cancelDelivery(externalDeliveryId: string, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuoteAccept(externalDeliveryId: string, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    getDelivery(externalDeliveryId: string, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
}
