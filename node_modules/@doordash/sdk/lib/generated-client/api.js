"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Drive Go API Specification
 * Last updated: Apr 11, 2022  ### Release Notes  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestDasherApi = exports.RequestDasherApiFactory = exports.RequestDasherApiFp = exports.RequestDasherApiAxiosParamCreator = exports.ValidationFieldErrorCodeEnum = exports.UpdateNotAllowedErrorReasonEnum = exports.UpdateNotAllowedErrorCodeEnum = exports.UnknownDeliveryErrorCodeEnum = exports.ServerFaultCodeEnum = exports.InvalidDeliveryErrorReasonEnum = exports.InvalidDeliveryErrorCodeEnum = exports.DuplicateDeliveryIdErrorCodeEnum = exports.DeliveryResponseCancellationReasonEnum = exports.DeliveryResponseDeliveryStatusEnum = exports.DeliveryOutputCancellationReasonEnum = exports.DeliveryOutputDeliveryStatusEnum = exports.CancelNotAllowedErrorReasonEnum = exports.CancelNotAllowedErrorCodeEnum = exports.AuthorizationErrorCodeEnum = exports.ActionIfUndeliverable = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
const url_1 = require("url");
/**
 * Enum to specify what should the dasher do if the delivery is undeliverable. The default is \"dispose\".
 * @export
 * @enum {string}
 */
var ActionIfUndeliverable;
(function (ActionIfUndeliverable) {
    ActionIfUndeliverable["ReturnToPickup"] = "return_to_pickup";
    ActionIfUndeliverable["Dispose"] = "dispose";
})(ActionIfUndeliverable = exports.ActionIfUndeliverable || (exports.ActionIfUndeliverable = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorizationErrorCodeEnum;
(function (AuthorizationErrorCodeEnum) {
    AuthorizationErrorCodeEnum["AuthorizationError"] = "authorization_error";
})(AuthorizationErrorCodeEnum = exports.AuthorizationErrorCodeEnum || (exports.AuthorizationErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CancelNotAllowedErrorCodeEnum;
(function (CancelNotAllowedErrorCodeEnum) {
    CancelNotAllowedErrorCodeEnum["CancelNotAllowed"] = "cancel_not_allowed";
})(CancelNotAllowedErrorCodeEnum = exports.CancelNotAllowedErrorCodeEnum || (exports.CancelNotAllowedErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CancelNotAllowedErrorReasonEnum;
(function (CancelNotAllowedErrorReasonEnum) {
    CancelNotAllowedErrorReasonEnum["DeliveryAbandoned"] = "delivery_abandoned";
    CancelNotAllowedErrorReasonEnum["DeliveryCancelled"] = "delivery_cancelled";
    CancelNotAllowedErrorReasonEnum["DeliveryCompleted"] = "delivery_completed";
    CancelNotAllowedErrorReasonEnum["DeliveryCreationInProgress"] = "delivery_creation_in_progress";
    CancelNotAllowedErrorReasonEnum["DeliveryPickedUp"] = "delivery_picked_up";
    CancelNotAllowedErrorReasonEnum["CancellationWindowClosed"] = "cancellation_window_closed";
})(CancelNotAllowedErrorReasonEnum = exports.CancelNotAllowedErrorReasonEnum || (exports.CancelNotAllowedErrorReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeliveryOutputDeliveryStatusEnum;
(function (DeliveryOutputDeliveryStatusEnum) {
    DeliveryOutputDeliveryStatusEnum["Quote"] = "quote";
    DeliveryOutputDeliveryStatusEnum["Created"] = "created";
    DeliveryOutputDeliveryStatusEnum["Confirmed"] = "confirmed";
    DeliveryOutputDeliveryStatusEnum["EnrouteToPickup"] = "enroute_to_pickup";
    DeliveryOutputDeliveryStatusEnum["ArrivedAtPickup"] = "arrived_at_pickup";
    DeliveryOutputDeliveryStatusEnum["PickedUp"] = "picked_up";
    DeliveryOutputDeliveryStatusEnum["EnrouteToDropoff"] = "enroute_to_dropoff";
    DeliveryOutputDeliveryStatusEnum["ArrivedAtDropoff"] = "arrived_at_dropoff";
    DeliveryOutputDeliveryStatusEnum["Delivered"] = "delivered";
    DeliveryOutputDeliveryStatusEnum["EnrouteToReturn"] = "enroute_to_return";
    DeliveryOutputDeliveryStatusEnum["ArrivedAtReturn"] = "arrived_at_return";
    DeliveryOutputDeliveryStatusEnum["Returned"] = "returned";
    DeliveryOutputDeliveryStatusEnum["Cancelled"] = "cancelled";
})(DeliveryOutputDeliveryStatusEnum = exports.DeliveryOutputDeliveryStatusEnum || (exports.DeliveryOutputDeliveryStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeliveryOutputCancellationReasonEnum;
(function (DeliveryOutputCancellationReasonEnum) {
    DeliveryOutputCancellationReasonEnum["CancelledByCreator"] = "cancelled_by_creator";
    DeliveryOutputCancellationReasonEnum["FailedToProcessPayment"] = "failed_to_process_payment";
    DeliveryOutputCancellationReasonEnum["FailedToAssignAndRefunded"] = "failed_to_assign_and_refunded";
    DeliveryOutputCancellationReasonEnum["FailedToPickup"] = "failed_to_pickup";
    DeliveryOutputCancellationReasonEnum["FailedToDeliver"] = "failed_to_deliver";
    DeliveryOutputCancellationReasonEnum["FailedToReturn"] = "failed_to_return";
})(DeliveryOutputCancellationReasonEnum = exports.DeliveryOutputCancellationReasonEnum || (exports.DeliveryOutputCancellationReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeliveryResponseDeliveryStatusEnum;
(function (DeliveryResponseDeliveryStatusEnum) {
    DeliveryResponseDeliveryStatusEnum["Quote"] = "quote";
    DeliveryResponseDeliveryStatusEnum["Created"] = "created";
    DeliveryResponseDeliveryStatusEnum["Confirmed"] = "confirmed";
    DeliveryResponseDeliveryStatusEnum["EnrouteToPickup"] = "enroute_to_pickup";
    DeliveryResponseDeliveryStatusEnum["ArrivedAtPickup"] = "arrived_at_pickup";
    DeliveryResponseDeliveryStatusEnum["PickedUp"] = "picked_up";
    DeliveryResponseDeliveryStatusEnum["EnrouteToDropoff"] = "enroute_to_dropoff";
    DeliveryResponseDeliveryStatusEnum["ArrivedAtDropoff"] = "arrived_at_dropoff";
    DeliveryResponseDeliveryStatusEnum["Delivered"] = "delivered";
    DeliveryResponseDeliveryStatusEnum["EnrouteToReturn"] = "enroute_to_return";
    DeliveryResponseDeliveryStatusEnum["ArrivedAtReturn"] = "arrived_at_return";
    DeliveryResponseDeliveryStatusEnum["Returned"] = "returned";
    DeliveryResponseDeliveryStatusEnum["Cancelled"] = "cancelled";
})(DeliveryResponseDeliveryStatusEnum = exports.DeliveryResponseDeliveryStatusEnum || (exports.DeliveryResponseDeliveryStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeliveryResponseCancellationReasonEnum;
(function (DeliveryResponseCancellationReasonEnum) {
    DeliveryResponseCancellationReasonEnum["CancelledByCreator"] = "cancelled_by_creator";
    DeliveryResponseCancellationReasonEnum["FailedToProcessPayment"] = "failed_to_process_payment";
    DeliveryResponseCancellationReasonEnum["FailedToAssignAndRefunded"] = "failed_to_assign_and_refunded";
    DeliveryResponseCancellationReasonEnum["FailedToPickup"] = "failed_to_pickup";
    DeliveryResponseCancellationReasonEnum["FailedToDeliver"] = "failed_to_deliver";
    DeliveryResponseCancellationReasonEnum["FailedToReturn"] = "failed_to_return";
})(DeliveryResponseCancellationReasonEnum = exports.DeliveryResponseCancellationReasonEnum || (exports.DeliveryResponseCancellationReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DuplicateDeliveryIdErrorCodeEnum;
(function (DuplicateDeliveryIdErrorCodeEnum) {
    DuplicateDeliveryIdErrorCodeEnum["DuplicateDeliveryId"] = "duplicate_delivery_id";
})(DuplicateDeliveryIdErrorCodeEnum = exports.DuplicateDeliveryIdErrorCodeEnum || (exports.DuplicateDeliveryIdErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InvalidDeliveryErrorCodeEnum;
(function (InvalidDeliveryErrorCodeEnum) {
    InvalidDeliveryErrorCodeEnum["InvalidDeliveryParameters"] = "invalid_delivery_parameters";
})(InvalidDeliveryErrorCodeEnum = exports.InvalidDeliveryErrorCodeEnum || (exports.InvalidDeliveryErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InvalidDeliveryErrorReasonEnum;
(function (InvalidDeliveryErrorReasonEnum) {
    InvalidDeliveryErrorReasonEnum["DistanceTooLong"] = "distance_too_long";
    InvalidDeliveryErrorReasonEnum["PickupAddressNotInCoverage"] = "pickup_address_not_in_coverage";
    InvalidDeliveryErrorReasonEnum["DeliveryAddressNotInCoverage"] = "delivery_address_not_in_coverage";
    InvalidDeliveryErrorReasonEnum["OutsideOfDeliveryTime"] = "outside_of_delivery_time";
})(InvalidDeliveryErrorReasonEnum = exports.InvalidDeliveryErrorReasonEnum || (exports.InvalidDeliveryErrorReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ServerFaultCodeEnum;
(function (ServerFaultCodeEnum) {
    ServerFaultCodeEnum["ServiceFault"] = "service_fault";
})(ServerFaultCodeEnum = exports.ServerFaultCodeEnum || (exports.ServerFaultCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UnknownDeliveryErrorCodeEnum;
(function (UnknownDeliveryErrorCodeEnum) {
    UnknownDeliveryErrorCodeEnum["UnknownDeliveryId"] = "unknown_delivery_id";
})(UnknownDeliveryErrorCodeEnum = exports.UnknownDeliveryErrorCodeEnum || (exports.UnknownDeliveryErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateNotAllowedErrorCodeEnum;
(function (UpdateNotAllowedErrorCodeEnum) {
    UpdateNotAllowedErrorCodeEnum["UpdateNotAllowed"] = "update_not_allowed";
})(UpdateNotAllowedErrorCodeEnum = exports.UpdateNotAllowedErrorCodeEnum || (exports.UpdateNotAllowedErrorCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateNotAllowedErrorReasonEnum;
(function (UpdateNotAllowedErrorReasonEnum) {
    UpdateNotAllowedErrorReasonEnum["DeliveryCancelled"] = "delivery_cancelled";
    UpdateNotAllowedErrorReasonEnum["DeliveryCompleted"] = "delivery_completed";
    UpdateNotAllowedErrorReasonEnum["DeliveryCreationInProgress"] = "delivery_creation_in_progress";
    UpdateNotAllowedErrorReasonEnum["DeliveryPickedUp"] = "delivery_picked_up";
    UpdateNotAllowedErrorReasonEnum["DeliveryAbandoned"] = "delivery_abandoned";
    UpdateNotAllowedErrorReasonEnum["UpdateWindowClosed"] = "update_window_closed";
})(UpdateNotAllowedErrorReasonEnum = exports.UpdateNotAllowedErrorReasonEnum || (exports.UpdateNotAllowedErrorReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ValidationFieldErrorCodeEnum;
(function (ValidationFieldErrorCodeEnum) {
    ValidationFieldErrorCodeEnum["ValidationError"] = "validation_error";
})(ValidationFieldErrorCodeEnum = exports.ValidationFieldErrorCodeEnum || (exports.ValidationFieldErrorCodeEnum = {}));
/**
 * RequestDasherApi - axios parameter creator
 * @export
 */
const RequestDasherApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Cancel delivery
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDelivery: async (externalDeliveryId, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('cancelDelivery', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}/cancel`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a delivery
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDelivery: async (createDeliveryInput, options = {}) => {
            // verify required parameter 'createDeliveryInput' is not null or undefined
            (0, common_1.assertParamExists)('createDelivery', 'createDeliveryInput', createDeliveryInput);
            const localVarPath = `/drive/v2/deliveries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createDeliveryInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a quote on delivery fee and validate coverage.
         * @summary Delivery Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuote: async (deliveryQuoteInput, options = {}) => {
            // verify required parameter 'deliveryQuoteInput' is not null or undefined
            (0, common_1.assertParamExists)('deliveryQuote', 'deliveryQuoteInput', deliveryQuoteInput);
            const localVarPath = `/drive/v2/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deliveryQuoteInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accept Delivery Quote
         * @summary Accept Delivery Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuoteAccept: async (externalDeliveryId, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('deliveryQuoteAccept', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/quotes/{external_delivery_id}/accept`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get delivery status and details
         * @summary Get Delivery Status
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelivery: async (externalDeliveryId, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('getDelivery', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the time or address for a delivery
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelivery: async (externalDeliveryId, updateDeliveryInput, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('updateDelivery', 'externalDeliveryId', externalDeliveryId);
            // verify required parameter 'updateDeliveryInput' is not null or undefined
            (0, common_1.assertParamExists)('updateDelivery', 'updateDeliveryInput', updateDeliveryInput);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateDeliveryInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RequestDasherApiAxiosParamCreator = RequestDasherApiAxiosParamCreator;
/**
 * RequestDasherApi - functional programming interface
 * @export
 */
const RequestDasherApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RequestDasherApiAxiosParamCreator)(configuration);
    return {
        /**
         * Cancel delivery
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelDelivery(externalDeliveryId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelDelivery(externalDeliveryId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a delivery
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDelivery(createDeliveryInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDelivery(createDeliveryInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a quote on delivery fee and validate coverage.
         * @summary Delivery Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryQuote(deliveryQuoteInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryQuote(deliveryQuoteInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Accept Delivery Quote
         * @summary Accept Delivery Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryQuoteAccept(externalDeliveryId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryQuoteAccept(externalDeliveryId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get delivery status and details
         * @summary Get Delivery Status
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDelivery(externalDeliveryId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDelivery(externalDeliveryId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the time or address for a delivery
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDelivery(externalDeliveryId, updateDeliveryInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.RequestDasherApiFp = RequestDasherApiFp;
/**
 * RequestDasherApi - factory interface
 * @export
 */
const RequestDasherApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RequestDasherApiFp)(configuration);
    return {
        /**
         * Cancel delivery
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDelivery(externalDeliveryId, options) {
            return localVarFp.cancelDelivery(externalDeliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a delivery
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDelivery(createDeliveryInput, options) {
            return localVarFp.createDelivery(createDeliveryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a quote on delivery fee and validate coverage.
         * @summary Delivery Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuote(deliveryQuoteInput, options) {
            return localVarFp.deliveryQuote(deliveryQuoteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * Accept Delivery Quote
         * @summary Accept Delivery Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuoteAccept(externalDeliveryId, options) {
            return localVarFp.deliveryQuoteAccept(externalDeliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get delivery status and details
         * @summary Get Delivery Status
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelivery(externalDeliveryId, options) {
            return localVarFp.getDelivery(externalDeliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the time or address for a delivery
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
            return localVarFp.updateDelivery(externalDeliveryId, updateDeliveryInput, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RequestDasherApiFactory = RequestDasherApiFactory;
/**
 * RequestDasherApi - object-oriented interface
 * @export
 * @class RequestDasherApi
 * @extends {BaseAPI}
 */
class RequestDasherApi extends base_1.BaseAPI {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    cancelDelivery(externalDeliveryId, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).cancelDelivery(externalDeliveryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    createDelivery(createDeliveryInput, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).createDelivery(createDeliveryInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuote(deliveryQuoteInput, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).deliveryQuote(deliveryQuoteInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuoteAccept(externalDeliveryId, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).deliveryQuoteAccept(externalDeliveryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    getDelivery(externalDeliveryId, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).getDelivery(externalDeliveryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
        return (0, exports.RequestDasherApiFp)(this.configuration).updateDelivery(externalDeliveryId, updateDeliveryInput, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestDasherApi = RequestDasherApi;
//# sourceMappingURL=api.js.map